# MkDocs website for documentation

MkDocs is a popular static site generator specifically designed for creating documentation websites. It allows you to write your documentation content in Markdown format and automatically generates a static HTML website.

Here are a few reasons why MkDocs is a good choice for technical documentation:

- **Simplicity**
It has a minimalistic approach, focusing on the essentials of documentation without unnecessary complexity.

- **Markdown support**
With MkDocs, you can write your documentation content in Markdown, making it accessible to both technical and non-technical contributors.

- **Navigation and search**
MkDocs automatically generates a navigation menu based on the directory structure of your documentation. Additionally, it provides a built-in search functionality that allows users to quickly find the information they need within your documentation.

- **Customizability**
MkDocs offers a range of customizable themes and templates, allowing you to tailor the appearance of your documentation to match your brand or project.

- **Versioning and deployment**
MkDocs supports versioning, making it convenient to manage and publish multiple versions of your documentation.

- **Integration with version control systems (VCS)**
MkDocs works well with VCS like Git. You can store your documentation files in a Git repository, making it easy to collaborate with team members, track changes, and manage contributions.

In this document, I share the process of building an MkDoc static website and hosting in on GitHub pages.

## Pre-requisites

- VS Code (or other source code editor)
- Python extension installed
- GitHub account
- GiHub desktop

## Step-by-step guides

The instructions below help create a GitHub repository, clone the repository to the local machine, launch the MkDocs website with Python, and publish it to GitHub pages.

### Create GitHub repository

#### To create a new repository in your GitHub account

1. Log in to your GitHub account.
2. At the top left corner, select **+** > **New repository**.
3. Give a name to your repository.
4. Select **Public**.
5. Select **Add a README file**.
6. For **.gitignore** select **Python**.
7. (Optional) For the **Choose a license** step, select the **GNU General pulic license** from the dropdown list.
8. Select **Create repository**.
Your repository has been created.
9. Open your GitHub desktop account and [clone the repository](https://www.youtube.com/watch?v=PoZNIbs_wx8).

Now you can make changes locally and then commit and push them to GitHub account in the web.

### Build website

#### To build a website

1. Open your cloned project in VS Code and open its terminal.
2. Assuming you have Python already, create virtual Python environment by using the following command:

    ```py
   python -m venv venv
    ```

3. Activate it using the following command:

    ```py
   source venv/bin/activate
    ```

4. Install MkDocs with the following command:

    ```py
   pip install mkdocs-material
    ```

    All the dependancies are downloaded for the website.
5. Created a new website by using the command:

    ```py
   mkdocs new .
    ```

    You  now have two files created for the website:

    ```py
    INFO     -  Writing config file: ./mkdocs.yml
    INFO     -  Writing initial docs: ./docs/index.md
    ```

6. Run the website locally by using the command:

    ```py
   mkdocs serve
    ```

    You know have a website built and serving on the local host ```http://127.0.0.1:8000/```

7. Open the website by copying and pasting the local host address into the browser address bar.
The website is served and can be accesses locally.

...to be continued.
